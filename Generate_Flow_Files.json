[
    {
        "id": "0b5e95fcc23cd134",
        "type": "tab",
        "label": "Generate Flow Files",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "59f594537b94e98a",
        "type": "file in",
        "z": "0b5e95fcc23cd134",
        "name": "Read Flow Files",
        "filename": "/path/to/flows/flows.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 410,
        "y": 500,
        "wires": [
            [
                "c59c28e395a11ae2"
            ]
        ]
    },
    {
        "id": "c59c28e395a11ae2",
        "type": "json",
        "z": "0b5e95fcc23cd134",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 610,
        "y": 500,
        "wires": [
            [
                "0ba50b57eafa855f"
            ]
        ]
    },
    {
        "id": "0ba50b57eafa855f",
        "type": "function",
        "z": "0b5e95fcc23cd134",
        "name": "Parse into indiviual files",
        "func": "let flows=msg.payload;\nlet tabs = flows.filter(el => el[\"type\"] === \"tab\");\nlet out=[];\ntabs.forEach(el => {\n    let id = el[\"id\"];\n    let re = / /g;\n    let lab = el[\"label\"].replace(re, \"_\") + \".json\";\n    let members = flows.filter(mem => mem[\"z\"] === id);\n    members.unshift(el);\n     let m={\"filename\":\"/path/to/save/files/\" +lab,\n               \"payload\":JSON.stringify(members)\n               }               ;\n     out.push(m);\n});\nreturn [out];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 500,
        "wires": [
            [
                "ca82223793d83012"
            ]
        ]
    },
    {
        "id": "2e3d66e7ee665b80",
        "type": "debug",
        "z": "0b5e95fcc23cd134",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 500,
        "wires": []
    },
    {
        "id": "06accbe91a65d77a",
        "type": "inject",
        "z": "0b5e95fcc23cd134",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "59f594537b94e98a"
            ]
        ]
    },
    {
        "id": "ca82223793d83012",
        "type": "file",
        "z": "0b5e95fcc23cd134",
        "name": "",
        "filename": "",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1140,
        "y": 500,
        "wires": [
            [
                "2e3d66e7ee665b80"
            ]
        ]
    },
    {
        "id": "5fea691c110a7083",
        "type": "catch",
        "z": "0b5e95fcc23cd134",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 630,
        "y": 700,
        "wires": [
            [
                "c1f0153e986b78cc"
            ]
        ]
    },
    {
        "id": "c1f0153e986b78cc",
        "type": "debug",
        "z": "0b5e95fcc23cd134",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 700,
        "wires": []
    }
]